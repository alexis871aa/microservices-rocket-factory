// Code generated for Alex Sokolov service
// Â© Alexey Sokolov 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// OrderPaidProducerConfig is an autogenerated mock type for the OrderPaidProducerConfig type
type OrderPaidProducerConfig struct {
	mock.Mock
}

type OrderPaidProducerConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderPaidProducerConfig) EXPECT() *OrderPaidProducerConfig_Expecter {
	return &OrderPaidProducerConfig_Expecter{mock: &_m.Mock}
}

// Config provides a mock function with no fields
func (_m *OrderPaidProducerConfig) Config() *sarama.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *sarama.Config
	if rf, ok := ret.Get(0).(func() *sarama.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.Config)
		}
	}

	return r0
}

// OrderPaidProducerConfig_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type OrderPaidProducerConfig_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *OrderPaidProducerConfig_Expecter) Config() *OrderPaidProducerConfig_Config_Call {
	return &OrderPaidProducerConfig_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *OrderPaidProducerConfig_Config_Call) Run(run func()) *OrderPaidProducerConfig_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderPaidProducerConfig_Config_Call) Return(_a0 *sarama.Config) *OrderPaidProducerConfig_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderPaidProducerConfig_Config_Call) RunAndReturn(run func() *sarama.Config) *OrderPaidProducerConfig_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Topic provides a mock function with no fields
func (_m *OrderPaidProducerConfig) Topic() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OrderPaidProducerConfig_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type OrderPaidProducerConfig_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *OrderPaidProducerConfig_Expecter) Topic() *OrderPaidProducerConfig_Topic_Call {
	return &OrderPaidProducerConfig_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *OrderPaidProducerConfig_Topic_Call) Run(run func()) *OrderPaidProducerConfig_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderPaidProducerConfig_Topic_Call) Return(_a0 string) *OrderPaidProducerConfig_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderPaidProducerConfig_Topic_Call) RunAndReturn(run func() string) *OrderPaidProducerConfig_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderPaidProducerConfig creates a new instance of OrderPaidProducerConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderPaidProducerConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderPaidProducerConfig {
	mock := &OrderPaidProducerConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

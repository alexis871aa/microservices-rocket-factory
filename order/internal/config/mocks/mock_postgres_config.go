// Code generated for Alex Sokolov service
// Â© Alexey Sokolov 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PostgresConfig is an autogenerated mock type for the PostgresConfig type
type PostgresConfig struct {
	mock.Mock
}

type PostgresConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *PostgresConfig) EXPECT() *PostgresConfig_Expecter {
	return &PostgresConfig_Expecter{mock: &_m.Mock}
}

// DatabaseName provides a mock function with no fields
func (_m *PostgresConfig) DatabaseName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DatabaseName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PostgresConfig_DatabaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DatabaseName'
type PostgresConfig_DatabaseName_Call struct {
	*mock.Call
}

// DatabaseName is a helper method to define mock.On call
func (_e *PostgresConfig_Expecter) DatabaseName() *PostgresConfig_DatabaseName_Call {
	return &PostgresConfig_DatabaseName_Call{Call: _e.mock.On("DatabaseName")}
}

func (_c *PostgresConfig_DatabaseName_Call) Run(run func()) *PostgresConfig_DatabaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresConfig_DatabaseName_Call) Return(_a0 string) *PostgresConfig_DatabaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresConfig_DatabaseName_Call) RunAndReturn(run func() string) *PostgresConfig_DatabaseName_Call {
	_c.Call.Return(run)
	return _c
}

// MigrationsDir provides a mock function with no fields
func (_m *PostgresConfig) MigrationsDir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MigrationsDir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PostgresConfig_MigrationsDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MigrationsDir'
type PostgresConfig_MigrationsDir_Call struct {
	*mock.Call
}

// MigrationsDir is a helper method to define mock.On call
func (_e *PostgresConfig_Expecter) MigrationsDir() *PostgresConfig_MigrationsDir_Call {
	return &PostgresConfig_MigrationsDir_Call{Call: _e.mock.On("MigrationsDir")}
}

func (_c *PostgresConfig_MigrationsDir_Call) Run(run func()) *PostgresConfig_MigrationsDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresConfig_MigrationsDir_Call) Return(_a0 string) *PostgresConfig_MigrationsDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresConfig_MigrationsDir_Call) RunAndReturn(run func() string) *PostgresConfig_MigrationsDir_Call {
	_c.Call.Return(run)
	return _c
}

// URI provides a mock function with no fields
func (_m *PostgresConfig) URI() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for URI")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PostgresConfig_URI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URI'
type PostgresConfig_URI_Call struct {
	*mock.Call
}

// URI is a helper method to define mock.On call
func (_e *PostgresConfig_Expecter) URI() *PostgresConfig_URI_Call {
	return &PostgresConfig_URI_Call{Call: _e.mock.On("URI")}
}

func (_c *PostgresConfig_URI_Call) Run(run func()) *PostgresConfig_URI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostgresConfig_URI_Call) Return(_a0 string) *PostgresConfig_URI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostgresConfig_URI_Call) RunAndReturn(run func() string) *PostgresConfig_URI_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostgresConfig creates a new instance of PostgresConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgresConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgresConfig {
	mock := &PostgresConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated for Alex Sokolov service
// Â© Alexey Sokolov 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/alexis871aa/microservices-rocket-factory/order/internal/model"
)

// PaymentClient is an autogenerated mock type for the PaymentClient type
type PaymentClient struct {
	mock.Mock
}

type PaymentClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentClient) EXPECT() *PaymentClient_Expecter {
	return &PaymentClient_Expecter{mock: &_m.Mock}
}

// PayOrder provides a mock function with given fields: ctx, orderUUID, userUUID, paymentMethod
func (_m *PaymentClient) PayOrder(ctx context.Context, orderUUID string, userUUID string, paymentMethod model.PaymentMethod) (string, error) {
	ret := _m.Called(ctx, orderUUID, userUUID, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.PaymentMethod) (string, error)); ok {
		return rf(ctx, orderUUID, userUUID, paymentMethod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.PaymentMethod) string); ok {
		r0 = rf(ctx, orderUUID, userUUID, paymentMethod)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, model.PaymentMethod) error); ok {
		r1 = rf(ctx, orderUUID, userUUID, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentClient_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type PaymentClient_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
//   - userUUID string
//   - paymentMethod model.PaymentMethod
func (_e *PaymentClient_Expecter) PayOrder(ctx interface{}, orderUUID interface{}, userUUID interface{}, paymentMethod interface{}) *PaymentClient_PayOrder_Call {
	return &PaymentClient_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, orderUUID, userUUID, paymentMethod)}
}

func (_c *PaymentClient_PayOrder_Call) Run(run func(ctx context.Context, orderUUID string, userUUID string, paymentMethod model.PaymentMethod)) *PaymentClient_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(model.PaymentMethod))
	})
	return _c
}

func (_c *PaymentClient_PayOrder_Call) Return(_a0 string, _a1 error) *PaymentClient_PayOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentClient_PayOrder_Call) RunAndReturn(run func(context.Context, string, string, model.PaymentMethod) (string, error)) *PaymentClient_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentClient creates a new instance of PaymentClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentClient {
	mock := &PaymentClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated for Alex Sokolov service
// Â© Alexey Sokolov 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alexis871aa/microservices-rocket-factory/assembly/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// OrderProducerService is an autogenerated mock type for the OrderProducerService type
type OrderProducerService struct {
	mock.Mock
}

type OrderProducerService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderProducerService) EXPECT() *OrderProducerService_Expecter {
	return &OrderProducerService_Expecter{mock: &_m.Mock}
}

// ProduceShipAssembled provides a mock function with given fields: ctx, event
func (_m *OrderProducerService) ProduceShipAssembled(ctx context.Context, event model.ShipAssembled) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for ProduceShipAssembled")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ShipAssembled) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderProducerService_ProduceShipAssembled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceShipAssembled'
type OrderProducerService_ProduceShipAssembled_Call struct {
	*mock.Call
}

// ProduceShipAssembled is a helper method to define mock.On call
//   - ctx context.Context
//   - event model.ShipAssembled
func (_e *OrderProducerService_Expecter) ProduceShipAssembled(ctx interface{}, event interface{}) *OrderProducerService_ProduceShipAssembled_Call {
	return &OrderProducerService_ProduceShipAssembled_Call{Call: _e.mock.On("ProduceShipAssembled", ctx, event)}
}

func (_c *OrderProducerService_ProduceShipAssembled_Call) Run(run func(ctx context.Context, event model.ShipAssembled)) *OrderProducerService_ProduceShipAssembled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ShipAssembled))
	})
	return _c
}

func (_c *OrderProducerService_ProduceShipAssembled_Call) Return(_a0 error) *OrderProducerService_ProduceShipAssembled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderProducerService_ProduceShipAssembled_Call) RunAndReturn(run func(context.Context, model.ShipAssembled) error) *OrderProducerService_ProduceShipAssembled_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderProducerService creates a new instance of OrderProducerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderProducerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderProducerService {
	mock := &OrderProducerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

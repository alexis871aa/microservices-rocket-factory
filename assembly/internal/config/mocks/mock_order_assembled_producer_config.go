// Code generated for Alex Sokolov service
// Â© Alexey Sokolov 2025.

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// OrderAssembledProducerConfig is an autogenerated mock type for the OrderAssembledProducerConfig type
type OrderAssembledProducerConfig struct {
	mock.Mock
}

type OrderAssembledProducerConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderAssembledProducerConfig) EXPECT() *OrderAssembledProducerConfig_Expecter {
	return &OrderAssembledProducerConfig_Expecter{mock: &_m.Mock}
}

// Config provides a mock function with no fields
func (_m *OrderAssembledProducerConfig) Config() *sarama.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *sarama.Config
	if rf, ok := ret.Get(0).(func() *sarama.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sarama.Config)
		}
	}

	return r0
}

// OrderAssembledProducerConfig_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type OrderAssembledProducerConfig_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *OrderAssembledProducerConfig_Expecter) Config() *OrderAssembledProducerConfig_Config_Call {
	return &OrderAssembledProducerConfig_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *OrderAssembledProducerConfig_Config_Call) Run(run func()) *OrderAssembledProducerConfig_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderAssembledProducerConfig_Config_Call) Return(_a0 *sarama.Config) *OrderAssembledProducerConfig_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderAssembledProducerConfig_Config_Call) RunAndReturn(run func() *sarama.Config) *OrderAssembledProducerConfig_Config_Call {
	_c.Call.Return(run)
	return _c
}

// TopicName provides a mock function with no fields
func (_m *OrderAssembledProducerConfig) TopicName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TopicName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OrderAssembledProducerConfig_TopicName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TopicName'
type OrderAssembledProducerConfig_TopicName_Call struct {
	*mock.Call
}

// TopicName is a helper method to define mock.On call
func (_e *OrderAssembledProducerConfig_Expecter) TopicName() *OrderAssembledProducerConfig_TopicName_Call {
	return &OrderAssembledProducerConfig_TopicName_Call{Call: _e.mock.On("TopicName")}
}

func (_c *OrderAssembledProducerConfig_TopicName_Call) Run(run func()) *OrderAssembledProducerConfig_TopicName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderAssembledProducerConfig_TopicName_Call) Return(_a0 string) *OrderAssembledProducerConfig_TopicName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderAssembledProducerConfig_TopicName_Call) RunAndReturn(run func() string) *OrderAssembledProducerConfig_TopicName_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderAssembledProducerConfig creates a new instance of OrderAssembledProducerConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderAssembledProducerConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderAssembledProducerConfig {
	mock := &OrderAssembledProducerConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

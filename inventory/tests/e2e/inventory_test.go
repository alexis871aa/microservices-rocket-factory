package integration

import (
	"context"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	inventoryV1 "github.com/alexis871aa/microservices-rocket-factory/shared/pkg/proto/inventory/v1"
)

var _ = Describe("Inventory Service", func() {
	var testCtx context.Context

	BeforeEach(func() {
		// —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
		testCtx = suiteCtx

		// –æ—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
		err := env.ClearInventoryCollection(testCtx)
		Expect(err).NotTo(HaveOccurred())

		// –≤—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
		err = env.InsertTestPart(testCtx, RocketEngine)
		Expect(err).NotTo(HaveOccurred())

		err = env.InsertTestPart(testCtx, FuelTank)
		Expect(err).NotTo(HaveOccurred())
	})

	Context("GetPart üöÄ", func() {
		It("–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ç–∞–ª—å –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É UUID", func() {
			// –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
			resp, err := inventoryClient.GetPart(testCtx, &inventoryV1.GetPartRequest{
				Uuid: RocketEngine.UUID,
			})

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			Expect(err).NotTo(HaveOccurred())
			Expect(resp).NotTo(BeNil())
			Expect(resp.Part).NotTo(BeNil())

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
			part := resp.Part
			Expect(part.Uuid).To(Equal(RocketEngine.UUID))
			Expect(part.Name).To(Equal(RocketEngine.Name))
			Expect(part.Description).To(Equal(RocketEngine.Description))
			Expect(part.Price).To(Equal(RocketEngine.Price))
			Expect(part.StockQuantity).To(Equal(RocketEngine.StockQuantity))
			Expect(part.Category).To(Equal(RocketEngine.Category))
		})

		It("–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É NotFound –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ UUID", func() {
			// –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º UUID
			resp, err := inventoryClient.GetPart(testCtx, &inventoryV1.GetPartRequest{
				Uuid: "non-existent-uuid",
			})

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ—à–∏–±–∫–∞ NotFound
			Expect(err).To(HaveOccurred())
			Expect(resp).To(BeNil())

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
			grpcStatus, ok := status.FromError(err)
			Expect(ok).To(BeTrue())
			Expect(grpcStatus.Code()).To(Equal(codes.NotFound))
		})

		It("–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ø—É—Å—Ç–æ–≥–æ UUID", func() {
			// –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º UUID
			resp, err := inventoryClient.GetPart(testCtx, &inventoryV1.GetPartRequest{
				Uuid: "",
			})

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			Expect(err).To(HaveOccurred())
			Expect(resp).To(BeNil())
		})
	})

	Context("ListParts üì¶", func() {
		It("–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞", func() {
			// –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
			resp, err := inventoryClient.ListParts(testCtx, &inventoryV1.ListPartsRequest{})

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			Expect(err).NotTo(HaveOccurred())
			Expect(resp).NotTo(BeNil())
			Expect(resp.Parts).To(HaveLen(2)) // RocketEngine + FuelTank

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞—à–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏
			partUUIDs := make([]string, len(resp.Parts))
			for i, part := range resp.Parts {
				partUUIDs[i] = part.Uuid
			}
			Expect(partUUIDs).To(ContainElements(RocketEngine.UUID, FuelTank.UUID))
		})

		It("–¥–æ–ª–∂–µ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ENGINE", func() {
			// –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ENGINE
			resp, err := inventoryClient.ListParts(testCtx, &inventoryV1.ListPartsRequest{
				Filter: &inventoryV1.PartsFilter{
					Categories: []inventoryV1.Category{inventoryV1.Category_ENGINE},
				},
			})

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			Expect(err).NotTo(HaveOccurred())
			Expect(resp).NotTo(BeNil())
			Expect(resp.Parts).To(HaveLen(1))

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è —Ç–æ–ª—å–∫–æ –¥–≤–∏–≥–∞—Ç–µ–ª—å
			part := resp.Parts[0]
			Expect(part.Uuid).To(Equal(RocketEngine.UUID))
			Expect(part.Category).To(Equal(inventoryV1.Category_ENGINE))
		})

		It("–¥–æ–ª–∂–µ–Ω —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ —Å–ø–∏—Å–∫—É UUID", func() {
			// –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É UUID
			resp, err := inventoryClient.ListParts(testCtx, &inventoryV1.ListPartsRequest{
				Filter: &inventoryV1.PartsFilter{
					Uuids: []string{FuelTank.UUID},
				},
			})

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			Expect(err).NotTo(HaveOccurred())
			Expect(resp).NotTo(BeNil())
			Expect(resp.Parts).To(HaveLen(1))

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–ø–ª–∏–≤–Ω—ã–π –±–∞–∫
			part := resp.Parts[0]
			Expect(part.Uuid).To(Equal(FuelTank.UUID))
			Expect(part.Category).To(Equal(inventoryV1.Category_FUEL))
		})

		It("–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", func() {
			// –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			resp, err := inventoryClient.ListParts(testCtx, &inventoryV1.ListPartsRequest{
				Filter: &inventoryV1.PartsFilter{
					Categories: []inventoryV1.Category{inventoryV1.Category_WING},
				},
			})

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			Expect(err).NotTo(HaveOccurred())
			Expect(resp).NotTo(BeNil())
			Expect(resp.Parts).To(HaveLen(0))
		})
	})

	Context("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MongoDB üóÑÔ∏è", func() {
		It("–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", func() {
			// –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –≤ –ë–î
			exists, err := env.PartExists(testCtx, RocketEngine.UUID)
			Expect(err).NotTo(HaveOccurred())
			Expect(exists).To(BeTrue())

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
			count, err := env.GetPartsCount(testCtx)
			Expect(err).NotTo(HaveOccurred())
			Expect(count).To(Equal(int64(2)))

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			engineCount, err := env.GetPartsByCategory(testCtx, inventoryV1.Category_ENGINE)
			Expect(err).NotTo(HaveOccurred())
			Expect(engineCount).To(Equal(int64(1)))
		})
	})
})

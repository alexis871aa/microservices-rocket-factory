package integration

import (
	"context"
	"os"
	"time"

	"go.mongodb.org/mongo-driver/bson"

	inventoryV1 "github.com/alexis871aa/microservices-rocket-factory/shared/pkg/proto/inventory/v1"
)

// TestPart - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
type TestPart struct {
	UUID          string
	Name          string
	Description   string
	Price         float64
	StockQuantity int64
	Category      inventoryV1.Category
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ —Ä–∞–∫–µ—Ç üöÄ
var (
	RocketEngine = TestPart{
		UUID:          "engine-001",
		Name:          "–†–∞–∫–µ—Ç–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å V8",
		Description:   "–ú–æ—â–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∫–µ—Ç",
		Price:         15000.50,
		StockQuantity: 5,
		Category:      inventoryV1.Category_ENGINE,
		CreatedAt:     time.Now(),
		UpdatedAt:     time.Now(),
	}

	FuelTank = TestPart{
		UUID:          "fuel-001",
		Name:          "–¢–æ–ø–ª–∏–≤–Ω—ã–π –±–∞–∫ 2000–ª",
		Description:   "–ë–æ–ª—å—à–æ–π —Ç–æ–ø–ª–∏–≤–Ω—ã–π –±–∞–∫ –¥–ª—è —Ä–∞–∫–µ—Ç–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞",
		Price:         8000.00,
		StockQuantity: 12,
		Category:      inventoryV1.Category_FUEL,
		CreatedAt:     time.Now(),
		UpdatedAt:     time.Now(),
	}

	Porthole = TestPart{
		UUID:          "porthole-001",
		Name:          "–ò–ª–ª—é–º–∏–Ω–∞—Ç–æ—Ä –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π",
		Description:   "–ü—Ä–æ—á–Ω—ã–π –∏–ª–ª—é–º–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π",
		Price:         2500.75,
		StockQuantity: 8,
		Category:      inventoryV1.Category_PORTHOLE,
		CreatedAt:     time.Now(),
		UpdatedAt:     time.Now(),
	}
)

// InsertTestPart - –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –¥–µ—Ç–∞–ª—å –≤ MongoDB
func (env *TestEnvironment) InsertTestPart(ctx context.Context, part TestPart) error {
	databaseName := os.Getenv("MONGO_DATABASE")
	if databaseName == "" {
		databaseName = "inventory-service" // fallback –∑–Ω–∞—á–µ–Ω–∏–µ
	}

	collection := env.Mongo.Client().Database(databaseName).Collection(inventoryCollectionName)

	// –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TestPart –≤ MongoDB –¥–æ–∫—É–º–µ–Ω—Ç
	doc := bson.M{
		"_id":            part.UUID,
		"name":           part.Name,
		"description":    part.Description,
		"price":          part.Price,
		"stock_quantity": part.StockQuantity,
		"category":       int(part.Category),
		"created_at":     part.CreatedAt,
		"updated_at":     part.UpdatedAt,
	}

	_, err := collection.InsertOne(ctx, doc)
	return err
}

// ClearInventoryCollection - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ parts
func (env *TestEnvironment) ClearInventoryCollection(ctx context.Context) error {
	// –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–¥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGO_DATABASE
	databaseName := os.Getenv("MONGO_DATABASE")
	if databaseName == "" {
		databaseName = "inventory-service" // fallback –∑–Ω–∞—á–µ–Ω–∏–µ
	}

	_, err := env.Mongo.Client().Database(databaseName).Collection(inventoryCollectionName).DeleteMany(ctx, bson.M{})
	if err != nil {
		return err
	}

	return nil
}

// PartExists - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –≤ –ë–î –ø–æ UUID
func (env *TestEnvironment) PartExists(ctx context.Context, uuid string) (bool, error) {
	databaseName := os.Getenv("MONGO_DATABASE")
	if databaseName == "" {
		databaseName = "inventory-service" // fallback –∑–Ω–∞—á–µ–Ω–∏–µ
	}

	collection := env.Mongo.Client().Database(databaseName).Collection(inventoryCollectionName)

	count, err := collection.CountDocuments(ctx, bson.M{"_id": uuid})
	return count > 0, err
}

// GetPartsCount - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
func (env *TestEnvironment) GetPartsCount(ctx context.Context) (int64, error) {
	databaseName := os.Getenv("MONGO_DATABASE")
	if databaseName == "" {
		databaseName = "inventory-service" // fallback –∑–Ω–∞—á–µ–Ω–∏–µ
	}

	collection := env.Mongo.Client().Database(databaseName).Collection(inventoryCollectionName)

	return collection.CountDocuments(ctx, bson.M{})
}

// GetPartsByCategory - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (env *TestEnvironment) GetPartsByCategory(ctx context.Context, category inventoryV1.Category) (int64, error) {
	databaseName := os.Getenv("MONGO_DATABASE")
	if databaseName == "" {
		databaseName = "inventory-service" // fallback –∑–Ω–∞—á–µ–Ω–∏–µ
	}

	collection := env.Mongo.Client().Database(databaseName).Collection(inventoryCollectionName)

	return collection.CountDocuments(ctx, bson.M{"category": int(category)})
}
